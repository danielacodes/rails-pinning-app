require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do

  before(:each) do 
    @user = FactoryGirl.build(:user)
  end

  after(:each) do
    @user.destroy
  end

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      first_name: @user.first_name,
      last_name: @user.last_name,
      email: @user.email,
      password: @user.password
    }
  }

  let(:invalid_attributes) {
    {
      first_name: @user.first_name,
      password: @user.password
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #show" do
    it "returns a success response" do
      user = User.create! valid_attributes
      post :authenticate, params: {email: @user.email, password: @user.password}
      get :show, params: {id: user.to_param}, session: valid_session
      expect(response).to be_success
    end

    it "redirects to login if user is not signed in" do
      user = User.create! valid_attributes
      get :show, params: {id: user.to_param}, session: valid_session
      expect(response).to redirect_to(:login)
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      user = User.create! valid_attributes
      post :authenticate, params: {email: @user.email, password: @user.password}
      get :edit, params: {id: user.to_param}, session: valid_session
      expect(response).to be_success
    end

    it "redirects to login if user is not signed in" do
      user = User.create! valid_attributes
      get :edit, params: {id: user.to_param}, session: valid_session
      expect(response).to redirect_to(:login)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new User" do
        expect {
          post :create, params: {user: valid_attributes}, session: valid_session
        }.to change(User, :count).by(1)
      end

      it "redirects to the created user" do
        post :create, params: {user: valid_attributes}, session: valid_session
        expect(response).to redirect_to(User.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {user: invalid_attributes}, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          first_name: "Skillcrush Dani",
        }
      }

      render_views

      it "updates the requested user" do
        user = User.create! valid_attributes
        post :authenticate, params: {email: @user.email, password: @user.password}
        put :update, params: {id: user.to_param, user: new_attributes}, session: valid_session
        user.reload
        expect(assigns(:user).attributes['first_name']).to match(new_attributes[:first_name])
      end

      it "redirects to the user" do
        user = User.create! valid_attributes
        post :authenticate, params: {email: @user.email, password: @user.password}
        put :update, params: {id: user.to_param, user: valid_attributes}, session: valid_session
        expect(response).to redirect_to(user)
      end
    end

    context "with invalid params" do
      it "displays the 'edit' template" do
        user = User.create! valid_attributes
        post :authenticate, params: {email: @user.email, password: @user.password}
        subject {put :update, params: {id: user.to_param, user: invalid_attributes}, session: valid_session}
        expect(subject).to redirect_to(user)
      end
    end

    it "redirects to login if user is not signed in" do
      user = User.create! valid_attributes
      put :update, params: {id: user.to_param, user: valid_attributes}, session: valid_session
      expect(response).to redirect_to(:login)
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes
      post :authenticate, params: {email: @user.email, password: @user.password}
      expect {
        delete :destroy, params: {id: user.to_param}, session: valid_session
      }.to change(User, :count).by(-1)
    end

    it "redirects to login if user is not signed in" do
      user = User.create! valid_attributes
      delete :destroy, params: {id: user.to_param}, session: valid_session
      expect(response).to redirect_to(:login)
    end
  end

  describe "GET login" do
    it "renders the login view" do
      get :login
      expect(response).to render_template('login')
    end
  end

  describe "POST login" do
   
    it "renders the show view if params valid" do
      user = User.create! valid_attributes
      post :authenticate, params: {email: @user.email, password: @user.password}, session: valid_session
      expect(response).to redirect_to(user)
    end

    it "populates @user if params valid" do 
      user = User.create! valid_attributes
      post :authenticate, params: {email: @user.email, password: @user.password}, session: valid_session
      expect(assigns[:user]).to eq(User.last)
    end

    it "renders the login view if params invalid" do
      post :authenticate, params: invalid_attributes, session: valid_session
      expect(response).to render_template('login')    
    end

    it "shows error message if params invalid" do
      post :authenticate, params: invalid_attributes, session: valid_session 
      expect(assigns[:errors]).to eq("Invalid email or password")
    end

  end

end
